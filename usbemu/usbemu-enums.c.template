/*** BEGIN file-header ***/
/* usbemu - USB Emulation Library
 * Copyright (C) 2016 You-Sheng Yang
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#if defined (HAVE_CONFIG_H)
#include "config.h"
#endif

#include "usbemu/usbemu-enums.h"

/**
 * SECTION:usbemu-enums
 * @short_description: utility functions for USBEmu enum types
 * @include: usbemu/usbemu.h
 *
 * This section contains automatically generated utility functions for enum
 * types used in USBEmu.
 */

/*** END file-header ***/

/*** BEGIN file-production ***/
/* enumerations from "usbemu/@basename@" */
/*** END file-production ***/

/*** BEGIN value-header ***/
static const G@Type@Value @enum_name@_values[] = {
/*** END value-header ***/
/*** BEGIN value-production ***/
    { @VALUENAME@, "@VALUENAME@", "@valuenick@" },
/*** END value-production ***/
/*** BEGIN value-tail ***/
    { 0, NULL, NULL }
};

GType
@enum_name@_get_type (void)
{
    static volatile gsize g_define_type_id__volatile = 0;

    if (g_once_init_enter (&g_define_type_id__volatile)) {
        GType g_define_type_id =
            g_@type@_register_static (g_intern_static_string ("@EnumName@"),
                                      @enum_name@_values);
        g_once_init_leave (&g_define_type_id__volatile, g_define_type_id);
    }

    return g_define_type_id__volatile;
}

#if defined (__@ENUMPREFIX@_@ENUMSHORT@_IS_ENUM__)
/**
 * @enum_name@_get_string:
 * @val: a @EnumName@.
 *
 * Gets the nickname string for the #@EnumName@ specified at @val.
 *
 * Returns: (transfer none): a string with the nickname, or %NULL if not found. Do not free the returned value.
 */
const gchar *
@enum_name@_get_string (@EnumName@ val)
{
    guint i;

    for (i = 0; @enum_name@_values[i].value_nick; i++) {
        if (val == @enum_name@_values[i].value)
            return @enum_name@_values[i].value_nick;
    }

    return NULL;
}
#elif defined (__@ENUMPREFIX@_@ENUMSHORT@_IS_FLAGS__)
/**
 * @enum_name@_build_string_from_mask:
 * @mask: bitmask of @EnumName@ values.
 *
 * Builds a string containing a comma-separated list of nicknames for
 * each #@EnumName@ in @mask.
 *
 * Returns: (transfer full): a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().
 */
gchar *
@enum_name@_build_string_from_mask (@EnumName@ mask)
{
    guint i;
    gboolean first = TRUE;
    GString *str = NULL;

    for (i = 0; @enum_name@_values[i].value_nick; i++) {
        /* We also look for exact matches */
        if (mask == @enum_name@_values[i].value) {
            if (str)
                g_string_free (str, TRUE);
            return g_strdup (@enum_name@_values[i].value_nick);
        }

        /* Build list with single-bit masks */
        if (mask & @enum_name@_values[i].value) {
            guint c;
            gulong number = @enum_name@_values[i].value;

            for (c = 0; number; c++)
                number &= number - 1;

            if (c == 1) {
                if (!str)
                    str = g_string_new ("");
                g_string_append_printf (str, "%s%s",
                                        first ? "" : ", ",
                                        @enum_name@_values[i].value_nick);
                if (first)
                    first = FALSE;
            }
        }
    }

    return (str ? g_string_free (str, FALSE) : NULL);
}
#endif /* __@ENUMPREFIX@_@ENUMSHORT@_IS_FLAGS__ */

/*** END value-tail ***/

/*** BEGIN file-tail ***/

/**
 * usbemu_enum_get_value_by_name_or_nick:
 * @type: #GType of target enum type.
 * @str: (in): needle string.
 *
 * Convenient function to search both enum name and nick.
 *
 * Returns: (transfer none): #GEnumValue with specified name or nick, or %NULL
 *          if not found.
 */
GEnumValue*
usbemu_enum_get_value_by_name_or_nick (GType        type,
                                       const gchar *str)
{
  GEnumClass *klass;
  GEnumValue *value;

  g_return_val_if_fail (G_TYPE_IS_ENUM (type), NULL);
  g_return_val_if_fail ((str != NULL), NULL);

  klass = g_type_class_ref (type);
  g_assert_nonnull (klass);

  value = g_enum_get_value_by_name (klass, str);
  if (value == NULL)
    value = g_enum_get_value_by_nick (klass, str);

  g_type_class_unref (klass);
  return value;
}

/**
 * usbemu_flags_from_string:
 * @type: #GType of target flags type.
 * @str: (in): string made of multiple names or nicks combined with '|'.
 * @out: (out) (optional): output flags with values of specified names or nicks
 *     OR-ed.
 *
 * Get combined value from string. This is essentially the counter process of
 * g_flags_to_string().
 *
 * Returns: %TRUE if succeeded, %FALSE otherwise.
 */
gboolean
usbemu_flags_from_string (GType        type,
                          const gchar *str,
                          guint       *out)
{
  GFlagsClass *klass;
  GFlagsValue *value;
  guint flags = 0;
  gchar **strv, **p;
  gboolean ret = TRUE;

  g_return_val_if_fail (G_TYPE_IS_FLAGS (type), FALSE);
  g_return_val_if_fail ((str != NULL), FALSE);

  if (*str == '\0')
    return FALSE;

  klass = g_type_class_ref (type);
  p = strv = g_strsplit (str, "|", 0);

  do {
    value = g_flags_get_value_by_name (klass, *p);
    if (value == NULL)
      value = g_flags_get_value_by_nick (klass, *p);
    if (value == NULL) {
      ret = FALSE;
      break;
    }

    flags |= value->value;
  } while (*(++p) != NULL);

  g_type_class_unref (klass);
  g_strfreev (strv);

  if (ret && (out != NULL))
    *out = flags;

  return ret;
}
/*** END file-tail ***/
